// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: show.sql

package db

import (
	"context"
	"time"
)

const createShow = `-- name: CreateShow :one
insert into show (
    "date",
    "start_time",
    "end_time",
    "cinema_hall_id",
    "movie_id"
) values (
    $1, $2, $3, $4, $5
) returning id, date, start_time, end_time, cinema_hall_id, movie_id
`

type CreateShowParams struct {
	Date         time.Time `json:"date"`
	StartTime    time.Time `json:"start_time"`
	EndTime      time.Time `json:"end_time"`
	CinemaHallID int64     `json:"cinema_hall_id"`
	MovieID      int64     `json:"movie_id"`
}

func (q *Queries) CreateShow(ctx context.Context, arg CreateShowParams) (Show, error) {
	row := q.db.QueryRowContext(ctx, createShow,
		arg.Date,
		arg.StartTime,
		arg.EndTime,
		arg.CinemaHallID,
		arg.MovieID,
	)
	var i Show
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.StartTime,
		&i.EndTime,
		&i.CinemaHallID,
		&i.MovieID,
	)
	return i, err
}

const getShow = `-- name: GetShow :one
select id, date, start_time, end_time, cinema_hall_id, movie_id from show where id = $1
`

func (q *Queries) GetShow(ctx context.Context, id int64) (Show, error) {
	row := q.db.QueryRowContext(ctx, getShow, id)
	var i Show
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.StartTime,
		&i.EndTime,
		&i.CinemaHallID,
		&i.MovieID,
	)
	return i, err
}

const getShowList = `-- name: GetShowList :many
select id, date, start_time, end_time, cinema_hall_id, movie_id from show limit $1 offset $2
`

type GetShowListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetShowList(ctx context.Context, arg GetShowListParams) ([]Show, error) {
	rows, err := q.db.QueryContext(ctx, getShowList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Show{}
	for rows.Next() {
		var i Show
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.StartTime,
			&i.EndTime,
			&i.CinemaHallID,
			&i.MovieID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShow = `-- name: UpdateShow :one
update show set
    date = $2, 
    start_time = $3,
    end_time = $4,
    cinema_hall_id = $5,
    movie_id = $6
where id = $1 returning id, date, start_time, end_time, cinema_hall_id, movie_id
`

type UpdateShowParams struct {
	ID           int64     `json:"id"`
	Date         time.Time `json:"date"`
	StartTime    time.Time `json:"start_time"`
	EndTime      time.Time `json:"end_time"`
	CinemaHallID int64     `json:"cinema_hall_id"`
	MovieID      int64     `json:"movie_id"`
}

func (q *Queries) UpdateShow(ctx context.Context, arg UpdateShowParams) (Show, error) {
	row := q.db.QueryRowContext(ctx, updateShow,
		arg.ID,
		arg.Date,
		arg.StartTime,
		arg.EndTime,
		arg.CinemaHallID,
		arg.MovieID,
	)
	var i Show
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.StartTime,
		&i.EndTime,
		&i.CinemaHallID,
		&i.MovieID,
	)
	return i, err
}
