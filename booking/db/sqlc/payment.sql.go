// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: payment.sql

package db

import (
	"context"
)

const createPayment = `-- name: CreatePayment :one
insert into payment (
    booking_id, amount
) values ($1, $2) returning id, booking_id, amount, created_at
`

type CreatePaymentParams struct {
	BookingID int64  `json:"booking_id"`
	Amount    string `json:"amount"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment, arg.BookingID, arg.Amount)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getPayment = `-- name: GetPayment :one
select id, booking_id, amount, created_at from payment where id = $1
`

func (q *Queries) GetPayment(ctx context.Context, id int64) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getPaymentByBookingID = `-- name: GetPaymentByBookingID :one
select id, booking_id, amount, created_at from payment where booking_id = $1
`

func (q *Queries) GetPaymentByBookingID(ctx context.Context, bookingID int64) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByBookingID, bookingID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
