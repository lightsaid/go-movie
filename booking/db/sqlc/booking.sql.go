// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: booking.sql

package db

import (
	"context"
	"time"
)

const createBooking = `-- name: CreateBooking :one
insert into booking (
    "user_id",
    "show_id",
    "seat_number",
    "created_at",
    "status"
) values (
    $1, $2, $3, $4, $5
) returning id, user_id, show_id, seat_number, created_at, status
`

type CreateBookingParams struct {
	UserID     int64     `json:"user_id"`
	ShowID     int64     `json:"show_id"`
	SeatNumber string    `json:"seat_number"`
	CreatedAt  time.Time `json:"created_at"`
	Status     int32     `json:"status"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.UserID,
		arg.ShowID,
		arg.SeatNumber,
		arg.CreatedAt,
		arg.Status,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ShowID,
		&i.SeatNumber,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getBooking = `-- name: GetBooking :one
select id, user_id, show_id, seat_number, created_at, status from booking where id = $1
`

func (q *Queries) GetBooking(ctx context.Context, id int64) (Booking, error) {
	row := q.db.QueryRowContext(ctx, getBooking, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ShowID,
		&i.SeatNumber,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getBookingByUserID = `-- name: GetBookingByUserID :many
select id, user_id, show_id, seat_number, created_at, status from booking where user_id = $1 limit $2 offset $3
`

type GetBookingByUserIDParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetBookingByUserID(ctx context.Context, arg GetBookingByUserIDParams) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getBookingByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Booking{}
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ShowID,
			&i.SeatNumber,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
