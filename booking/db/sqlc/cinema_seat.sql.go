// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: cinema_seat.sql

package db

import (
	"context"
)

const createCinemaSeat = `-- name: CreateCinemaSeat :one
insert into cinema_seat (
    "cinema_hall_id", 
    "type",
    "seat_number"
) values (
    $1, $2, $3
) returning id, type, cinema_hall_id, seat_number
`

type CreateCinemaSeatParams struct {
	CinemaHallID int64  `json:"cinema_hall_id"`
	Type         int32  `json:"type"`
	SeatNumber   string `json:"seat_number"`
}

func (q *Queries) CreateCinemaSeat(ctx context.Context, arg CreateCinemaSeatParams) (CinemaSeat, error) {
	row := q.db.QueryRowContext(ctx, createCinemaSeat, arg.CinemaHallID, arg.Type, arg.SeatNumber)
	var i CinemaSeat
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.CinemaHallID,
		&i.SeatNumber,
	)
	return i, err
}

const getCinemaSeatByHallID = `-- name: GetCinemaSeatByHallID :many
select id, type, cinema_hall_id, seat_number from cinema_seat where cinema_hall_id = $1
`

func (q *Queries) GetCinemaSeatByHallID(ctx context.Context, cinemaHallID int64) ([]CinemaSeat, error) {
	rows, err := q.db.QueryContext(ctx, getCinemaSeatByHallID, cinemaHallID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CinemaSeat{}
	for rows.Next() {
		var i CinemaSeat
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.CinemaHallID,
			&i.SeatNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCinemaSeat = `-- name: UpdateCinemaSeat :one
update cinema_seat set
    type = $2,
    seat_number = $3
where id = $1 returning id, type, cinema_hall_id, seat_number
`

type UpdateCinemaSeatParams struct {
	ID         int64  `json:"id"`
	Type       int32  `json:"type"`
	SeatNumber string `json:"seat_number"`
}

func (q *Queries) UpdateCinemaSeat(ctx context.Context, arg UpdateCinemaSeatParams) (CinemaSeat, error) {
	row := q.db.QueryRowContext(ctx, updateCinemaSeat, arg.ID, arg.Type, arg.SeatNumber)
	var i CinemaSeat
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.CinemaHallID,
		&i.SeatNumber,
	)
	return i, err
}
