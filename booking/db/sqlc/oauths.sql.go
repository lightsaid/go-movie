// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: oauths.sql

package db

import (
	"context"
	"database/sql"
)

const createOauths = `-- name: CreateOauths :one
insert into oauths (
    "user_id",
    "oauth_type",
    "oauth_id",
    "unionid",
    "credential"
) values (
    $1, $2, $3, $4, $5
) returning id, user_id, oauth_type, oauth_id, unionid, credential
`

type CreateOauthsParams struct {
	UserID     int64          `json:"user_id"`
	OauthType  string         `json:"oauth_type"`
	OauthID    string         `json:"oauth_id"`
	Unionid    sql.NullString `json:"unionid"`
	Credential sql.NullString `json:"credential"`
}

func (q *Queries) CreateOauths(ctx context.Context, arg CreateOauthsParams) (Oauth, error) {
	row := q.db.QueryRowContext(ctx, createOauths,
		arg.UserID,
		arg.OauthType,
		arg.OauthID,
		arg.Unionid,
		arg.Credential,
	)
	var i Oauth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OauthType,
		&i.OauthID,
		&i.Unionid,
		&i.Credential,
	)
	return i, err
}

const updateOauths = `-- name: UpdateOauths :one
update oauths set 
    user_id = $2,
    oauth_id = $3,
    unionid = $4,
    credential = $5
where id = $1 returning id, user_id, oauth_type, oauth_id, unionid, credential
`

type UpdateOauthsParams struct {
	ID         int64          `json:"id"`
	UserID     int64          `json:"user_id"`
	OauthID    string         `json:"oauth_id"`
	Unionid    sql.NullString `json:"unionid"`
	Credential sql.NullString `json:"credential"`
}

func (q *Queries) UpdateOauths(ctx context.Context, arg UpdateOauthsParams) (Oauth, error) {
	row := q.db.QueryRowContext(ctx, updateOauths,
		arg.ID,
		arg.UserID,
		arg.OauthID,
		arg.Unionid,
		arg.Credential,
	)
	var i Oauth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OauthType,
		&i.OauthID,
		&i.Unionid,
		&i.Credential,
	)
	return i, err
}
