// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: cinema.sql

package db

import (
	"context"
)

const createCinema = `-- name: CreateCinema :one
insert into cinema (
  "city_id",
  "name",
  "lat",
  "long",
  "total_cinema_halls"
)values (
    $1, $2, $3, $4, $5
) returning id, city_id, name, lat, long, total_cinema_halls
`

type CreateCinemaParams struct {
	CityID           int64  `json:"city_id"`
	Name             string `json:"name"`
	Lat              string `json:"lat"`
	Long             string `json:"long"`
	TotalCinemaHalls int32  `json:"total_cinema_halls"`
}

func (q *Queries) CreateCinema(ctx context.Context, arg CreateCinemaParams) (Cinema, error) {
	row := q.db.QueryRowContext(ctx, createCinema,
		arg.CityID,
		arg.Name,
		arg.Lat,
		arg.Long,
		arg.TotalCinemaHalls,
	)
	var i Cinema
	err := row.Scan(
		&i.ID,
		&i.CityID,
		&i.Name,
		&i.Lat,
		&i.Long,
		&i.TotalCinemaHalls,
	)
	return i, err
}

const getCinemaList = `-- name: GetCinemaList :many
select id, city_id, name, lat, long, total_cinema_halls from cinema limit $1 offset $2
`

type GetCinemaListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetCinemaList(ctx context.Context, arg GetCinemaListParams) ([]Cinema, error) {
	rows, err := q.db.QueryContext(ctx, getCinemaList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cinema{}
	for rows.Next() {
		var i Cinema
		if err := rows.Scan(
			&i.ID,
			&i.CityID,
			&i.Name,
			&i.Lat,
			&i.Long,
			&i.TotalCinemaHalls,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCinema = `-- name: UpdateCinema :one
update cinema set
  "city_id" = $2,
  "name" = $3,
  "lat" = $4,
  "long" = $5,
  "total_cinema_halls" = $6
where id = $1 returning id, city_id, name, lat, long, total_cinema_halls
`

type UpdateCinemaParams struct {
	ID               int64  `json:"id"`
	CityID           int64  `json:"city_id"`
	Name             string `json:"name"`
	Lat              string `json:"lat"`
	Long             string `json:"long"`
	TotalCinemaHalls int32  `json:"total_cinema_halls"`
}

func (q *Queries) UpdateCinema(ctx context.Context, arg UpdateCinemaParams) (Cinema, error) {
	row := q.db.QueryRowContext(ctx, updateCinema,
		arg.ID,
		arg.CityID,
		arg.Name,
		arg.Lat,
		arg.Long,
		arg.TotalCinemaHalls,
	)
	var i Cinema
	err := row.Scan(
		&i.ID,
		&i.CityID,
		&i.Name,
		&i.Lat,
		&i.Long,
		&i.TotalCinemaHalls,
	)
	return i, err
}
